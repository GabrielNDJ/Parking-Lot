# Generated by Django 4.2.2 on 2023-06-16 21:41

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Clientes',
            fields=[
                ('dni_cliente', models.IntegerField(primary_key=True, serialize=False)),
                ('numero_cliente', models.IntegerField()),
                ('nombre', models.CharField(max_length=50)),
                ('apellido', models.CharField(max_length=50)),
                ('telefono', models.CharField(max_length=45)),
                ('email', models.CharField(max_length=70)),
            ],
            options={
                'verbose_name': 'clientes de estacionamiento',
                'verbose_name_plural': 'clientes',
                'db_table': 'cliente',
            },
        ),
        migrations.CreateModel(
            name='Parcela',
            fields=[
                ('idparcela', models.AutoField(primary_key=True, serialize=False)),
                ('descripcion_parcela', models.CharField(max_length=60)),
            ],
            options={
                'verbose_name': 'parcela estacionamiento',
                'verbose_name_plural': 'parcelas',
                'db_table': 'parcela',
            },
        ),
        migrations.CreateModel(
            name='sector_estacionamiento',
            fields=[
                ('idsector', models.AutoField(primary_key=True, serialize=False)),
                ('descrpcion_sector', models.CharField(max_length=80)),
            ],
            options={
                'verbose_name': 'sector estacionamiento',
                'verbose_name_plural': 'sectores de estacionamiento',
                'db_table': 'sector_estacionamiento',
            },
        ),
        migrations.CreateModel(
            name='Vehiculos',
            fields=[
                ('idvehiculos', models.AutoField(primary_key=True, serialize=False)),
                ('patente', models.CharField(max_length=45)),
                ('marca', models.CharField(max_length=45)),
                ('modelo', models.CharField(max_length=45)),
                ('dni_cliente', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='estacionamiento.clientes')),
                ('idparcela', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='estacionamiento.parcela')),
            ],
            options={
                'verbose_name': 'vehiculos estacionados',
                'verbose_name_plural': 'vehiculos',
                'db_table': 'vehiculos',
            },
        ),
        migrations.AddField(
            model_name='parcela',
            name='idsector',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='estacionamiento.sector_estacionamiento'),
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=150, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
